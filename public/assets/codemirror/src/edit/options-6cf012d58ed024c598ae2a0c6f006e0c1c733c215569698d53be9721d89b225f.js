function dragDropChanged(e,t,r){if(!t!=!(r&&r!=Init)){let r=e.display.dragFunctions,l=t?on:off;l(e.display.scroller,"dragstart",r.start),l(e.display.scroller,"dragenter",r.enter),l(e.display.scroller,"dragover",r.over),l(e.display.scroller,"dragleave",r.leave),l(e.display.scroller,"drop",r.drop)}}function wrappingChanged(e){e.options.lineWrapping?(addClass(e.display.wrapper,"CodeMirror-wrap"),e.display.sizer.style.minWidth="",e.display.sizerWidth=null):(rmClass(e.display.wrapper,"CodeMirror-wrap"),findMaxLine(e)),estimateLineHeights(e),regChange(e),clearCaches(e),setTimeout(()=>updateScrollbars(e),100)}import{onBlur}from"../display/focus.js";import{getGutters,updateGutters}from"../display/gutters.js";import{loadMode,resetModeState}from"../display/mode_state.js";import{initScrollbars,updateScrollbars}from"../display/scrollbars.js";import{updateSelection}from"../display/selection.js";import{regChange}from"../display/view_tracking.js";import{getKeyMap}from"../input/keymap.js";import{defaultSpecialCharPlaceholder}from"../line/line_data.js";import{Pos}from"../line/pos.js";import{findMaxLine}from"../line/spans.js";import{clearCaches,compensateForHScroll,estimateLineHeights}from"../measurement/position_measurement.js";import{replaceRange}from"../model/changes.js";import{mobile,windows}from"../util/browser.js";import{addClass,rmClass}from"../util/dom.js";import{off,on}from"../util/event.js";import{themeChanged}from"./utils.js";export let Init={toString:function(){return"CodeMirror.Init"}};export let defaults={};export let optionHandlers={};export function defineOptions(e){function t(t,l,a,o){e.defaults[t]=l,a&&(r[t]=o?(e,t,r)=>{r!=Init&&a(e,t,r)}:a)}let r=e.optionHandlers;e.defineOption=t,e.Init=Init,t("value","",(e,t)=>e.setValue(t),!0),t("mode",null,(e,t)=>{e.doc.modeOption=t,loadMode(e)},!0),t("indentUnit",2,loadMode,!0),t("indentWithTabs",!1),t("smartIndent",!0),t("tabSize",4,e=>{resetModeState(e),clearCaches(e),regChange(e)},!0),t("lineSeparator",null,(e,t)=>{if(e.doc.lineSep=t,!t)return;let r=[],l=e.doc.first;e.doc.iter(e=>{for(let a=0;;){let o=e.text.indexOf(t,a);if(-1==o)break;a=o+t.length,r.push(Pos(l,o))}l++});for(let l=r.length-1;l>=0;l--)replaceRange(e.doc,t,r[l],Pos(r[l].line,r[l].ch+t.length))}),t("specialChars",/[\u0000-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]/g,(e,t,r)=>{e.state.specialChars=new RegExp(t.source+(t.test("\t")?"":"|\t"),"g"),r!=Init&&e.refresh()}),t("specialCharPlaceholder",defaultSpecialCharPlaceholder,e=>e.refresh(),!0),t("electricChars",!0),t("inputStyle",mobile?"contenteditable":"textarea",()=>{throw new Error("inputStyle can not (yet) be changed in a running editor")},!0),t("spellcheck",!1,(e,t)=>e.getInputField().spellcheck=t,!0),t("autocorrect",!1,(e,t)=>e.getInputField().autocorrect=t,!0),t("autocapitalize",!1,(e,t)=>e.getInputField().autocapitalize=t,!0),t("rtlMoveVisually",!windows),t("wholeLineUpdateBefore",!0),t("theme","default",e=>{themeChanged(e),updateGutters(e)},!0),t("keyMap","default",(e,t,r)=>{let l=getKeyMap(t),a=r!=Init&&getKeyMap(r);a&&a.detach&&a.detach(e,l),l.attach&&l.attach(e,a||null)}),t("extraKeys",null),t("configureMouse",null),t("lineWrapping",!1,wrappingChanged,!0),t("gutters",[],(e,t)=>{e.display.gutterSpecs=getGutters(t,e.options.lineNumbers),updateGutters(e)},!0),t("fixedGutter",!0,(e,t)=>{e.display.gutters.style.left=t?compensateForHScroll(e.display)+"px":"0",e.refresh()},!0),t("coverGutterNextToScrollbar",!1,e=>updateScrollbars(e),!0),t("scrollbarStyle","native",e=>{initScrollbars(e),updateScrollbars(e),e.display.scrollbars.setScrollTop(e.doc.scrollTop),e.display.scrollbars.setScrollLeft(e.doc.scrollLeft)},!0),t("lineNumbers",!1,(e,t)=>{e.display.gutterSpecs=getGutters(e.options.gutters,t),updateGutters(e)},!0),t("firstLineNumber",1,updateGutters,!0),t("lineNumberFormatter",e=>e,updateGutters,!0),t("showCursorWhenSelecting",!1,updateSelection,!0),t("resetSelectionOnContextMenu",!0),t("lineWiseCopyCut",!0),t("pasteLinesPerSelection",!0),t("selectionsMayTouch",!1),t("readOnly",!1,(e,t)=>{"nocursor"==t&&(onBlur(e),e.display.input.blur()),e.display.input.readOnlyChanged(t)}),t("screenReaderLabel",null,(e,t)=>{t=""===t?null:t,e.display.input.screenReaderLabelChanged(t)}),t("disableInput",!1,(e,t)=>{t||e.display.input.reset()},!0),t("dragDrop",!0,dragDropChanged),t("allowDropFileTypes",null),t("cursorBlinkRate",530),t("cursorScrollMargin",0),t("cursorHeight",1,updateSelection,!0),t("singleCursorHeightPerLine",!0,updateSelection,!0),t("workTime",100),t("workDelay",100),t("flattenSpans",!0,resetModeState,!0),t("addModeClass",!1,resetModeState,!0),t("pollInterval",100),t("undoDepth",200,(e,t)=>e.doc.history.undoDepth=t),t("historyEventDelay",1250),t("viewportMargin",10,e=>e.refresh(),!0),t("maxHighlightLength",1e4,resetModeState,!0),t("moveInputWithCursor",!0,(e,t)=>{t||e.display.input.resetPosition()}),t("tabindex",null,(e,t)=>e.display.input.getField().tabIndex=t||""),t("autofocus",null),t("direction","ltr",(e,t)=>e.doc.setDirection(t),!0),t("phrases",null)};